name: I18N-Linter

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  file_changes:
    name: Razorpay I18N Linter
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Get changed files
        id: changed-files
        run: |
            if ${{ github.event_name == 'pull_request' }}; then
                echo "changed_files=$(git diff --name-only --line-prefix=`git rev-parse --show-toplevel`/ -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
            else
                echo "changed_files=$(git diff --name-only --line-prefix=`git rev-parse --show-toplevel`/ ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
            fi
      - name: Running-I18N-Linter
        id: text-files
        run: |
              for file in ${{ steps.changed-files.outputs.changed_files }}; do
                validFile() {
                  getFileExtension() {
                    local pathName="$1"
                    echo "${pathName##*.}"
                  }
                  local pathName="$1"
                  local supportedFileExtension=("js" "jsx" "ts" "tsx" "html")
                  local excludeFolders=(".github" "__test__")
                  local excludedBranch=("revert" "hotfix")
                  local branchName="${{ steps.extract_branch.outputs.branch }}"
                  local fileExtension=$(getFileExtension "$pathName")
                  local isSupportedFileExtension=false
                  local isExcludedFolder=false

                  for ext in "${supportedFileExtension[@]}"; do
                    if [[ "$ext" == "$fileExtension" ]]; then
                      isSupportedFileExtension=true
                      break
                    fi
                  done

                  for folder in "${excludeFolders[@]}"; do
                    if [[ "$pathName" == *"$folder"* ]]; then
                      isExcludedFolder=true
                      break
                    fi
                  done

                  if [[ "$isSupportedFileExtension" == true && "$isExcludedFolder" == false ]]; then
                    return 0
                  fi

                  return 1
                }
                if validFile "$file"; then
                  echo "Linter now running on file:$file"
                  original_content=$(cat "$file")
                  content_diff="$(git diff origin/${{ github.event.pull_request.base.ref }} origin/${{ steps.extract_branch.outputs.branch }} -- $file)"
                  checkKeywords() {
                    local code="${1}"
                    local currencies=("INR" "Ruppees" "RM" "MYR" "USD")
                    local currencySymbols=("\\â‚¹")
                    local regionSpecificWords=("RBI" "GST" "CIN")
                    local linesToBeIgnored=("import")
                    local new_lines=()
                    local errors=()
                    
                    while IFS= read -r line || [[ "$line" ]]; do
                      new_lines+=("$line")
                    done < "$file"

                    for ((i = 0; i < ${#new_lines[@]}; i++)); do
                      local line="${new_lines[i]}"
                      local lineWithoutComments=$(echo "$line" | sed -E 's/\/\/.*|\/\*[^*]*\*\///g')
                      local shouldLineBeIgnored=0
                      for term in "${linesToBeIgnored[@]}"; do
                        regex="\\b$term\\b"
                        match=$(echo "$lineWithoutComments" | grep -P "$regex")
                        if [[ -n "$match" ]]; then
                          shouldLineBeIgnored=1
                          break
                        fi
                      done

                      if [ $shouldLineBeIgnored -eq 0 ]; then
                        local words=()

                        IFS=' ' read -r -a words <<< "$lineWithoutComments"

                        for word in "${words[@]}"; do
                          hasMatch() {
                            local pattern="$1"
                            local type="$2"
                            local keyword="$3"
                            local regex
                            regex="$pattern"
                            local match
                            match=$(echo "$word" | grep -P "$regex")
                            local warning_title="Razorpay/I18N-Linter"

                            if [[ -n "$match" ]]; then
                              local currency_error_msg
                              local symbol_error_msg
                              local text_error_msg
                              local warning_msg
                              
                              case "$type" in
                                "currency")
                                    currency_error_msg="Hard coded currency {} found, please use currency from User model file something like- props.user.merchant.currency"
                                    warning_msg="${currency_error_msg//\{\}/$keyword}"
                                    warning_title="Region specific currency detected"
                                    ;;
                                "symbol")
                                    symbol_error_msg="Avoid hardcoding currency symbols instead import symbols from rzp-utils file"
                                    warning_msg="$symbol_error_msg"
                                    warning_title="Region specific symbol detected"
                                    ;;
                                "text")
                                    text_error_msg="Region specific keyword detected, please use genric term as we are also supporting multiple regions merchant who might be not aware of {} keyword"
                                    warning_msg="${text_error_msg//\{\}/$keyword}"
                                    warning_title="Region specific keyword detected"
                                    ;;
                                *)
                                    warning_msg="Region specific text detected, please take approval from i18n team for this change"
                                    ;;
                              esac

                              echo "::warning file=$file,line=$((i + 1)),col=15,title=$warning_title::$warning_msg"
                            fi
                          }

                          for keyword in "${regionSpecificWords[@]}"; do
                              hasMatch "\\b(?<!\\.)$keyword\\b" "text" "$keyword"
                          done

                          for symbol in "${currencySymbols[@]}"; do
                              hasMatch "$symbol" "symbol" "$symbol"
                          done

                          for currency in "${currencies[@]}"; do
                              hasMatch "\\b(?<!\\.)$currency\\b" "currency" "$currency"
                          done
                        done
                      fi
                    done

                    printf '%s\n' "${errors[@]}"
                  }
                  errors=$(checkKeywords "$original_content")
                  if [[ -n $errors ]]; then
                    while IFS= read -r error; do
                      echo "$error" >&2
                    done <<< "$errors"
                  else
                    echo "No hardcoding related to I18N found."
                  fi
                else
                  echo "Linter won't run on this file: $file"
                fi
              done