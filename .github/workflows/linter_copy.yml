name: I18N-Linter

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  file_changes:
    name: Razorpay I18N Linter
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Get changed files
        id: changed-files
        run: |
            if ${{ github.event_name == 'pull_request' }}; then
                echo "changed_files=$(git diff --name-only --line-prefix=`git rev-parse --show-toplevel`/ -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
            else
                echo "changed_files=$(git diff --name-only --line-prefix=`git rev-parse --show-toplevel`/ ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
            fi
      - name: Running-I18N-Linter
        id: text-files
        run: |
          checkKeywords() {
            local file="$1"
            local error_count=0
            local original_content=$(cat "$file")
            local content_diff=$(git diff origin/${{ github.event.pull_request.base.ref }} origin/${{ steps.extract_branch.outputs.branch }} -- "$file")
            local error_msg_list=(
              "Hardcoded currency {} found, please use currency from User model file something like- props.user.merchant.currency"
              "Region-specific keyword detected, please use generic terms as we also support multiple regions merchants who might not be aware of {} keyword"
              "Avoid hardcoding currency symbols instead import symbols from rzp-utils file"
            )
            local ignore_linter_directives=("ignore-i18n-linter" "ignore-i18n-linter-next-line" "ignore-i18n-linter-start" "ignore-i18n-linter-end")
            local warning_title="Razorpay/I18N-Linter"
            local file_content=()
            local currencies=("INR" "RM" "MYR" "USD")
            local currency_symbols=("\\â‚¹")
            local region_specific_words=("RBI" "GST" "CIN" "Ruppees")
            local linesToBeIgnored=("import")

            while IFS= read -r line || [[ "$line" ]]; do
              file_content+=("$line")
            done < "$file"

            checkAgainstRegex() {
              local line_text=$1
              local regex="$2"
              local match_found=$(echo "$line_text" | grep -P "$regex")
              if [[ -n "$match_found" ]]; then
                echo 1
              else
                echo 0
              fi
            }

            should_ignore_whole_file=$(checkAgainstRegex "${file_content[0]}" "^\\s*((\\/\\/)|(\\/\\*))\\s*(${ignore_linter_directives[0]})")
            if [ $should_ignore_whole_file -eq 0 ]; then
              printf "Linter now scanning code on file:$file \n"
              between_line_linter_ignore_flag=0
              next_line_linter_ignore_flag=0
              for ((i = 0; i < ${#file_content[@]}; i++)); do
                line_text="${file_content[i]}"
                next_line_linter_ignore=$(checkAgainstRegex "$line_text" "^\\s*((\\/\\/)|(\\/\\*))\\s*(${ignore_linter_directives[1]})")
                start_line_linter_ignore=$(checkAgainstRegex "$line_text" "^\\s*((\\/\\/)|(\\/\\*))\\s*(${ignore_linter_directives[2]})")
                end_line_linter_ignore=$(checkAgainstRegex "$line_text" "^\\s*((\\/\\/)|(\\/\\*))\\s*(${ignore_linter_directives[3]})")
                lines_containing_specific_word_ignore=$()

                if [[ $start_line_linter_ignore -eq 1 ]]; then
                  printf "start line linter ignore comment detected \n"
                  between_line_linter_ignore_flag=1
                elif [[ $next_line_linter_ignore -eq 1 ]]; then
                  printf "next line linter ignore comment detected \n"
                  next_line_linter_ignore_flag=1
                elif [[ $next_line_linter_ignore_flag -eq 1 ]]; then
                  next_line_linter_ignore_flag=0
                elif [[ $between_line_linter_ignore_flag -eq 1 ]]; then
                  if [[ $end_line_linter_ignore -eq 1 ]]; then
                    printf "end line linter ignore comment detected \n"
                    between_line_linter_ignore_flag=0
                  fi
                else
                  local lineWithoutComments=$(echo "$line_text" | sed -E 's/\/\/.*|\/\*[^*]*\*\///g')
                  local shouldLineBeIgnored=0
                  for term in "${linesToBeIgnored[@]}"; do
                    local match_found=$(checkAgainstRegex "$lineWithoutComments" "\\b$term\\b")
                    if [ $match_found -eq 1 ]; then
                      shouldLineBeIgnored=1
                      break
                    fi
                  done
                  if [[ $shouldLineBeIgnored -eq 1 ]]; then
                    printf "Line contains restricted keyword, linter will skip line: $lineWithoutComments \n"
                  else
                    local words=()
                    local warning_msg
                    IFS=' ' read -r -a words <<< "$line_text"

                    for word in "${words[@]}"; do
                      for keyword in "${region_specific_words[@]}"; do
                        match_found=$(checkAgainstRegex "$word" "\\b(?<!\\.)$keyword\\b")
                        if [ $match_found -eq 1 ]; then
                          error_msg="${error_msg_list[1]}"
                          warning_msg="${error_msg//\{\}/$keyword}"
                          echo "::warning file=$file,line=$((i + 1)),col=15,title="Region specific text detected"::$warning_msg"
                          error_count=$((error_count+1))
                        fi
                      done

                      for symbol in "${currency_symbols[@]}"; do
                        match_found=$(checkAgainstRegex "$word" "$symbol")
                        if [ $match_found -eq 1 ]; then
                          error_msg="${error_msg_list[2]}"
                          warning_msg="${error_msg//\{\}/$symbol}"
                          echo "::warning file=$file,line=$((i + 1)),col=15,title="Region specific symbol detected"::$warning_msg"
                          error_count=$((error_count+1))
                        fi
                      done

                      for currency in "${currencies[@]}"; do
                        match_found=$(checkAgainstRegex "$word" "\\b(?<!\\.)$currency\\b")
                        if [ $match_found -eq 1 ]; then
                          error_msg="${error_msg_list[0]}"
                          warning_msg="${error_msg//\{\}/$currency}"
                          echo "::warning file=$file,line=$((i + 1)),col=15,title="Region specific currency detected"::$warning_msg"
                          error_count=$((error_count+1))
                        fi
                      done
                    done
                  fi
                fi
              done
            else
              printf "Whole file ignore comment found, aborting linter run on file: $file \n"
            fi
            echo "$error_count warnings found for the file:$file"
          }

          if [ "$steps.extract_branch.outputs.branch" != "revert-*" ] && [ "$steps.extract_branch.outputs.branch" != "skiplint-*" ]; then
            total_warnings_collected=5
            for file in ${{ steps.changed-files.outputs.changed_files }}; do
              if ! [[ "$file" =~ \.github.* || "$file" =~ __test__ ]]; then
                if [[ "$file" =~ \.(js|jsx|ts|tsx|html)$ ]]; then
                  warnings_found=$(checkKeywords "$file")
                  echo "$warnings_found"
                  echo "$total_warnings_collected + $warnings_found"
                else
                  printf "Unsupported file extension found, linter wont be running on file: $file \n"
                fi
              else
                printf "File is a part of folder which have been flaged to be ignored, hence linter will ignore file: $file \n"
              fi
            done
            if [ "$total_warnings_collected" -gt 0 ]; then
              printf "$total_warnings_collected warning founds \n"
              exit 1
            fi
          else
            printf "Restricted branch name found, linter won't run \n"
          fi
