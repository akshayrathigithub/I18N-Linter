name: I18N-Linter

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  file_changes:
    name: Razorpay I18N Linter
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Get changed files
        id: changed-files
        run: |
            if ${{ github.event_name == 'pull_request' }}; then
                echo "changed_files=$(git diff --name-only --line-prefix=`git rev-parse --show-toplevel`/ -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
            else
                echo "changed_files=$(git diff --name-only --line-prefix=`git rev-parse --show-toplevel`/ ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
            fi
      - name: Running-I18N-Linter
        id: text-files
        run: |
          checkKeywords() {
            local file="$1"
            local original_content=$(cat "$file")
            local content_diff=$(git diff origin/${{ github.event.pull_request.base.ref }} origin/${{ steps.extract_branch.outputs.branch }} -- "$file")
            local error_msg=(
              "Hardcoded currency {} found, please use currency from User model file something like- props.user.merchant.currency"
              "Region-specific keyword detected, please use generic terms as we also support multiple regions merchants who might not be aware of {} keyword"
              "Avoid hardcoding currency symbols instead import symbols from rzp-utils file"
            )
            local currency_error_msg="Hardcoded currency {} found, please use currency from User model file something like- props.user.merchant.currency"
            local symbol_error_msg="Avoid hardcoding currency symbols instead import symbols from rzp-utils file"
            local text_error_msg="Region-specific keyword detected, please use generic terms as we also support multiple regions merchants who might not be aware of {} keyword"
            local ignore_linter_directives=("ignore-i18n-linter" "ignore-i18n-linter-next-line" "ignore-i18n-linter-start" "ignore-i18n-linter-end")
            local warning_title="Razorpay/I18N-Linter"
            local file_content=()

            while IFS= read -r line || [[ "$line" ]]; do
              file_content+=("$line")
            done < "$file"

            # Helper function to check if a line should be ignored

            shouldIgnoreWholeFile() {
              local regex="^\\s*((\\/\\/)|(\\/\\*))\\s*(${ignore_linter_directives[0]})"
              local is_first_line_matched=$(echo "${file_content[0]}" | grep -P "$regex")
              if [[ -n "$is_first_line_matched" ]]; then
                return 1
              fi
              return 0
            }

            linterIgnore() {
              echo "function called"
              if [[ $1 =~ $2 ]]; then
                return 0
              fi
              return 1
            }

            if shouldIgnoreWholeFile; then
              echo "Linter now scanning code on file:$file"
              for ((i = 0; i < ${#file_content[@]}; i++)); do
                line_text="${file_content[i]}"
                echo "$line_text file I"
                linterIgnore "$line_text" "${ignore_linter_directives[1]}"
                next_line_linter_ignore=$
                echo "$next_line_linter_ignore next_line_linter_ignore"
                start_line_linter_ignore=$(linterIgnore "$line_text" "${ignore_linter_directives[2]}")
                end_line_linter_ignore=$(linterIgnore "$line_text" "${ignore_linter_directives[3]}")
                echo "$start_line_linter_ignore start_line_linter_ignore"
                echo "$end_line_linter_ignore end_line_linter_ignore"
                next_line_linter_ignore_flag=0
                between_line_linter_ignore_flag=0
                if [ $start_line_linter_ignore -eq 0 ]; then
                  echo "start line linter ignore comment detected"
                  start_line_linter_ignore=1
                elif [ $next_line_linter_ignore -eq 0 ]; then
                  echo "next line linter ignore comment detected"
                  next_line_linter_ignore_flag=1
                elif [ $next_line_linter_ignore_flag -eq 1 ]; then
                  next_line_linter_ignore_flag=0
                elif [ $between_line_linter_ignore_flag -eq 1 ]; then
                  if [ $end_line_linter_ignore -eq 0 ]; then
                    between_line_linter_ignore_flag=0
                  fi
                else
                  local lineWithoutComments=$(echo "$line_text" | sed -E 's/\/\/.*|\/\*[^*]*\*\///g')
                  local words=()
                  IFS=' ' read -r -a words <<< "$line_text"

                  for word in "${words[@]}"; do
                    if [[ $word =~ \.(.*)$ ]]; then
                      if [[ $word =~ (INR|RM|MYR|USD) ]]; then
                        echo "::warning file=$file,line=$LINENO,col=15,title=$warning_title::$currency_error_msg"
                      elif [[ $word =~ (\\â‚¹) ]]; then
                        echo "::warning file=$file,line=$LINENO,col=15,title=$warning_title::$symbol_error_msg"
                      elif [[ $word =~ (RBI|GST|CIN|Ruppees) ]]; then
                        echo "::warning file=$file,line=$LINENO,col=15,title=$warning_title::$text_error_msg"
                      fi
                    fi
                  done
                fi
              done
            else
              echo "Whole file ignore comment found, aborting linter run on file: $file"
              printf "\n"
            fi
          }

          if [ "$steps.extract_branch.outputs.branch" != "revert-*" ] && [ "$steps.extract_branch.outputs.branch" != "skiplint-*" ]; then
            for file in ${{ steps.changed-files.outputs.changed_files }}; do
              if ! [[ "$file" =~ \.github.* || "$file" =~ __test__ ]]; then
                if [[ "$file" =~ \.(js|jsx|ts|tsx|html)$ ]]; then
                  checkKeywords "$file"
                else
                  echo "Unsupported file extension found, linter wont be running on file: $file"
                  printf "\n"
                fi
              else
                echo "File is a part of folder which have been flaged to be ignored, hence linter will ignore file: $file"
                printf "\n"
              fi
            done
          else
            echo "Restricted branch name found, linter won't run"
          fi

