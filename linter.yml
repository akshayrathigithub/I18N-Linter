name: Linter

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  file_changes:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
            fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch


      - name: Get changed files
        id: changed-files
        run: |
            if ${{ github.event_name == 'pull_request' }}; then
                echo "changed_files=$(git diff --name-only --line-prefix=`git rev-parse --show-toplevel`/ -r HEAD^1 HEAD | xargs)" >> $GITHUB_OUTPUT
            else
                echo "changed_files=$(git diff --name-only --line-prefix=`git rev-parse --show-toplevel`/ ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_OUTPUT
            fi
      - name: List changed files
        id: text-files
        run: |
              for file in ${{ steps.changed-files.outputs.changed_files }}; do
                validFile() {
                  getFileExtension() {
                    local pathName="$1"
                    echo "${pathName##*.}"
                  }
                  local pathName="$1"
                  local supportedFileExtension=("js" "jsx" "ts" "tsx" "html")
                  local excludeFolders=(".github" "__test__")
                  local excludedBranch=("revert" "hotfix")
                  local branchName="${{ steps.extract_branch.outputs.branch }}"
                  local fileExtension=$(getFileExtension "$pathName")
                  local isSupportedFileExtension=false
                  local isExcludedFolder=false

                  for ext in "${supportedFileExtension[@]}"; do
                    if [[ "$ext" == "$fileExtension" ]]; then
                      isSupportedFileExtension=true
                      break
                    fi
                  done

                  for folder in "${excludeFolders[@]}"; do
                    if [[ "$pathName" == *"$folder"* ]]; then
                      isExcludedFolder=true
                      break
                    fi
                  done

                  if [[ "$isSupportedFileExtension" == true && "$isExcludedFolder" == false ]]; then
                    return 0
                  fi

                  return 1
                }
                if validFile "$file"; then
                  # original_content=$(cat "$file")
                  # last_commit_of_file="$(git log -n 1 --pretty=format:%H -- $file)"
                  content_diff="$(git diff origin/${{ github.event.pull_request.base.ref }} origin/${{ steps.extract_branch.outputs.branch }} -- $file)"
                  echo "$content_diff"
                  checkKeywords() {
                    local code="${1}"
                    local keywords=("INR" "Ruppees" "RM" "MYR" "RBI" "GST" "CIN")
                    local lines=()
                    local errors=()
                    local lastError=""

                    IFS=$'\n' read -r -d '' -a lines <<< "$code"
                    echo "${#lines[@]}"

                    for ((i = 0; i < ${#lines[@]}; i++)); do
                      local line="${lines[i]}"
                      echo "$line $i"
                      local lineWithoutComments=$(echo "$line" | sed -E 's/\/\/.*|\/\*[^*]*\*\///g')
                      local words=()

                      IFS=' ' read -r -a words <<< "$lineWithoutComments"

                      for word in "${words[@]}"; do
                        for keyword in "${keywords[@]}"; do
                          local pattern="\\b${keyword}\\b"
                          local currencyPattern="â‚¹|\\$"
                          local wordRegex=$(echo "$pattern")
                          echo "$wordRegex"
                          local currencyRegex=$(echo "$currencyPattern")
                          local wordMatch=$(echo "$word" | grep -o -E "$wordRegex")
                          local currencyMatch=$(echo "$word" | grep -o -E "$currencyRegex")

                          if [[ -n $wordMatch ]]; then
                            errorMsg() {
                              local errorType="$1"
                              local key_word="$2"
                              local error_mapping

                              error_mapping["currency"]="Hard coded currency {} found, please use currency from User model file something like- props.user.merchant.currency"
                              error_mapping["symbol"]="Avoid hardcoding currency symbols instead import symbols from rzp-utils file"
                              error_mapping["text"]="Region specific keyword detected, please use genric term as we are also supporting multiple regions merchant who might be not aware of {} keyword"

                              if [[ "${error_mapping[$errorType]+exists}" ]]; then
                                echo "${error_mapping[$errorType]//\{\}/$key_word}"
                              else
                                echo "Region specific text detected, please take approval from i18n team for this change"
                              fi
                            }
                            errorMsgText=$(errorMsg "text" "$word")
                            echo "::warning file=$file,line=$((i + 1)),col=15::$errorMsgText"
                          fi

                          if [[ -n $currencyMatch ]]; then
                            errorMsg() {
                              local errorType="$1"
                              local key_word="$2"
                              local error_mapping

                              error_mapping["currency"]="Hard coded currency {} found, please use currency from User model file something like- props.user.merchant.currency"
                              error_mapping["symbol"]="Avoid hardcoding currency symbols instead import symbols from rzp-utils file"
                              error_mapping["text"]="Region specific keyword detected, please use genric term as we are also supporting multiple regions merchant who might be not aware of {} keyword"

                              if [[ "${error_mapping[$errorType]+exists}" ]]; then
                                echo "${error_mapping[$errorType]//\{\}/$key_word}"
                              else
                                echo "Region specific text detected, please take approval from i18n team for this change"
                              fi
                            }
                            errorMsgText=$(errorMsg "currency" "$word")
                            echo "::warning file=$file,line=$((i + 1)),col=15::$errorMsgText"
                          fi
                        done
                      done
                    done

                    printf '%s\n' "${errors[@]}"
                  }
                  errors=$(checkKeywords "$content_diff")
                  if [[ -n $errors ]]; then
                    while IFS= read -r error; do
                      echo "$error" >&2
                    done <<< "$errors"
                  else
                    echo "No keyword errors found."
                  fi
                  echo "Valid file"
                else
                  echo "Linter won't run on this file"
                fi
              done